services:
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: nimbus
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always

  migrate:
    image: migrate/migrate
    networks:
      - app_network
    volumes:
      - ./db/migrations:/migrations
    command:
      - -path=/migrations
      - -database=postgres://postgres:postgres@postgres:5432/nimbus?sslmode=disable
      - up
    depends_on:
      postgres:
        condition: service_healthy

  app:
    container_name: app
    build:
      context: .
      dockerfile: ./cmd/app/Dockerfile
    ports:
      - "8081:8081"
    networks:
      - app_network
    depends_on:
      - films
      - users
      - sessions
    restart: always

  films:
    container_name: films
    build:
      context: .
      dockerfile: ./cmd/films/Dockerfile
    ports:
      - "8020:8020"
      - "8021:8021"
    networks:
      - app_network
    depends_on:
      postgres:
        condition: service_healthy
    restart: always

  users:
    container_name: users
    build:
      context: .
      dockerfile: ./cmd/users/Dockerfile
    ports:
      - "8030:8030"
      - "8031:8031"
    networks:
      - app_network
    depends_on:
      postgres:
        condition: service_healthy
    restart: always

  sessions:
    container_name: sessions
    build:
      context: .
      dockerfile: ./cmd/sessions/Dockerfile
    environment:
      SECRETKEY: SECRETKEY
    ports:
      - "8010:8010"
      - "8011:8011"
    networks:
      - app_network
    depends_on:
      postgres:
        condition: service_healthy
    restart: always

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - app_network
    depends_on:
      - app
    restart: always

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.1
    container_name: cadvisor
    platform: linux/arm64
    privileged: true
    ports:
      - "8090:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - app_network
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M

  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    platform: linux/arm64
    ports:
      - "9100:9100"
    networks:
      - app_network
    restart: always
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/host'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/host:ro

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    user: root
    ports:
      - "3000:3000"
    volumes:
      - ./grafana:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    environment:
      TZ: "Europe/Moscow"
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_SECURITY_ADMIN_USER: admin
    networks:
      - app_network
    depends_on:
      - prometheus
    restart: always

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data: