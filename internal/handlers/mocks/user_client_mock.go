// Code generated by MockGen. DO NOT EDIT.
// Source: user_client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	session "github.com/SanExpett/diploma/internal/session/proto"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockUsersClient is a mock of UsersClient interface.
type MockUsersClient struct {
	ctrl     *gomock.Controller
	recorder *MockUsersClientMockRecorder
}

// MockUsersClientMockRecorder is the mock recorder for MockUsersClient.
type MockUsersClientMockRecorder struct {
	mock *MockUsersClient
}

// NewMockUsersClient creates a new mock instance.
func NewMockUsersClient(ctrl *gomock.Controller) *MockUsersClient {
	mock := &MockUsersClient{ctrl: ctrl}
	mock.recorder = &MockUsersClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersClient) EXPECT() *MockUsersClientMockRecorder {
	return m.recorder
}

// ChangeUserAvatarByUuid mocks base method.
func (m *MockUsersClient) ChangeUserAvatarByUuid(ctx context.Context, in *session.ChangeUserAvatarByUuidRequest, opts ...grpc.CallOption) (*session.ChangeUserAvatarByUuidResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeUserAvatarByUuid", varargs...)
	ret0, _ := ret[0].(*session.ChangeUserAvatarByUuidResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeUserAvatarByUuid indicates an expected call of ChangeUserAvatarByUuid.
func (mr *MockUsersClientMockRecorder) ChangeUserAvatarByUuid(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserAvatarByUuid", reflect.TypeOf((*MockUsersClient)(nil).ChangeUserAvatarByUuid), varargs...)
}

// ChangeUserName mocks base method.
func (m *MockUsersClient) ChangeUserName(ctx context.Context, in *session.ChangeUserNameRequest, opts ...grpc.CallOption) (*session.ChangeUserNameResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeUserName", varargs...)
	ret0, _ := ret[0].(*session.ChangeUserNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeUserName indicates an expected call of ChangeUserName.
func (mr *MockUsersClientMockRecorder) ChangeUserName(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserName", reflect.TypeOf((*MockUsersClient)(nil).ChangeUserName), varargs...)
}

// ChangeUserNameByUuid mocks base method.
func (m *MockUsersClient) ChangeUserNameByUuid(ctx context.Context, in *session.ChangeUserNameByUuidRequest, opts ...grpc.CallOption) (*session.ChangeUserNameByUuidResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeUserNameByUuid", varargs...)
	ret0, _ := ret[0].(*session.ChangeUserNameByUuidResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeUserNameByUuid indicates an expected call of ChangeUserNameByUuid.
func (mr *MockUsersClientMockRecorder) ChangeUserNameByUuid(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserNameByUuid", reflect.TypeOf((*MockUsersClient)(nil).ChangeUserNameByUuid), varargs...)
}

// ChangeUserPassword mocks base method.
func (m *MockUsersClient) ChangeUserPassword(ctx context.Context, in *session.ChangeUserPasswordRequest, opts ...grpc.CallOption) (*session.ChangeUserPasswordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeUserPassword", varargs...)
	ret0, _ := ret[0].(*session.ChangeUserPasswordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeUserPassword indicates an expected call of ChangeUserPassword.
func (mr *MockUsersClientMockRecorder) ChangeUserPassword(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserPassword", reflect.TypeOf((*MockUsersClient)(nil).ChangeUserPassword), varargs...)
}

// ChangeUserPasswordByUuid mocks base method.
func (m *MockUsersClient) ChangeUserPasswordByUuid(ctx context.Context, in *session.ChangeUserPasswordByUuidRequest, opts ...grpc.CallOption) (*session.ChangeUserPasswordByUuidResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeUserPasswordByUuid", varargs...)
	ret0, _ := ret[0].(*session.ChangeUserPasswordByUuidResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeUserPasswordByUuid indicates an expected call of ChangeUserPasswordByUuid.
func (mr *MockUsersClientMockRecorder) ChangeUserPasswordByUuid(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserPasswordByUuid", reflect.TypeOf((*MockUsersClient)(nil).ChangeUserPasswordByUuid), varargs...)
}

// CreateUser mocks base method.
func (m *MockUsersClient) CreateUser(ctx context.Context, in *session.CreateUserRequest, opts ...grpc.CallOption) (*session.CreateUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUser", varargs...)
	ret0, _ := ret[0].(*session.CreateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUsersClientMockRecorder) CreateUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUsersClient)(nil).CreateUser), varargs...)
}

// GetSubscriptions mocks base method.
func (m *MockUsersClient) GetSubscriptions(ctx context.Context, in *session.GetSubscriptionsRequest, opts ...grpc.CallOption) (*session.GetSubscriptionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSubscriptions", varargs...)
	ret0, _ := ret[0].(*session.GetSubscriptionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptions indicates an expected call of GetSubscriptions.
func (mr *MockUsersClientMockRecorder) GetSubscriptions(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptions", reflect.TypeOf((*MockUsersClient)(nil).GetSubscriptions), varargs...)
}

// GetUser mocks base method.
func (m *MockUsersClient) GetUser(ctx context.Context, in *session.GetUserRequest, opts ...grpc.CallOption) (*session.GetUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUser", varargs...)
	ret0, _ := ret[0].(*session.GetUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUsersClientMockRecorder) GetUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUsersClient)(nil).GetUser), varargs...)
}

// GetUserDataByUuid mocks base method.
func (m *MockUsersClient) GetUserDataByUuid(ctx context.Context, in *session.GetUserDataByUuidRequest, opts ...grpc.CallOption) (*session.GetUserDataByUuidResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserDataByUuid", varargs...)
	ret0, _ := ret[0].(*session.GetUserDataByUuidResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDataByUuid indicates an expected call of GetUserDataByUuid.
func (mr *MockUsersClientMockRecorder) GetUserDataByUuid(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDataByUuid", reflect.TypeOf((*MockUsersClient)(nil).GetUserDataByUuid), varargs...)
}

// GetUserPreview mocks base method.
func (m *MockUsersClient) GetUserPreview(ctx context.Context, in *session.GetUserPreviewRequest, opts ...grpc.CallOption) (*session.GetUserPreviewResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserPreview", varargs...)
	ret0, _ := ret[0].(*session.GetUserPreviewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPreview indicates an expected call of GetUserPreview.
func (mr *MockUsersClientMockRecorder) GetUserPreview(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPreview", reflect.TypeOf((*MockUsersClient)(nil).GetUserPreview), varargs...)
}

// HasSubscription mocks base method.
func (m *MockUsersClient) HasSubscription(ctx context.Context, in *session.HasSubscriptionRequest, opts ...grpc.CallOption) (*session.HasSubscriptionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HasSubscription", varargs...)
	ret0, _ := ret[0].(*session.HasSubscriptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasSubscription indicates an expected call of HasSubscription.
func (mr *MockUsersClientMockRecorder) HasSubscription(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSubscription", reflect.TypeOf((*MockUsersClient)(nil).HasSubscription), varargs...)
}

// HasUser mocks base method.
func (m *MockUsersClient) HasUser(ctx context.Context, in *session.HasUserRequest, opts ...grpc.CallOption) (*session.HasUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HasUser", varargs...)
	ret0, _ := ret[0].(*session.HasUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasUser indicates an expected call of HasUser.
func (mr *MockUsersClientMockRecorder) HasUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasUser", reflect.TypeOf((*MockUsersClient)(nil).HasUser), varargs...)
}

// PaySubscription mocks base method.
func (m *MockUsersClient) PaySubscription(ctx context.Context, in *session.PaySubscriptionRequest, opts ...grpc.CallOption) (*session.PaySubscriptionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PaySubscription", varargs...)
	ret0, _ := ret[0].(*session.PaySubscriptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PaySubscription indicates an expected call of PaySubscription.
func (mr *MockUsersClientMockRecorder) PaySubscription(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaySubscription", reflect.TypeOf((*MockUsersClient)(nil).PaySubscription), varargs...)
}

// RemoveUser mocks base method.
func (m *MockUsersClient) RemoveUser(ctx context.Context, in *session.RemoveUserRequest, opts ...grpc.CallOption) (*session.RemoveUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveUser", varargs...)
	ret0, _ := ret[0].(*session.RemoveUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveUser indicates an expected call of RemoveUser.
func (mr *MockUsersClientMockRecorder) RemoveUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUser", reflect.TypeOf((*MockUsersClient)(nil).RemoveUser), varargs...)
}
