// Code generated by MockGen. DO NOT EDIT.
// Source: session_client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	session "github.com/SanExpett/diploma/internal/session/proto"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockSessionsClient is a mock of SessionsClient interface.
type MockSessionsClient struct {
	ctrl     *gomock.Controller
	recorder *MockSessionsClientMockRecorder
}

// MockSessionsClientMockRecorder is the mock recorder for MockSessionsClient.
type MockSessionsClientMockRecorder struct {
	mock *MockSessionsClient
}

// NewMockSessionsClient creates a new mock instance.
func NewMockSessionsClient(ctrl *gomock.Controller) *MockSessionsClient {
	mock := &MockSessionsClient{ctrl: ctrl}
	mock.recorder = &MockSessionsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionsClient) EXPECT() *MockSessionsClientMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockSessionsClient) Add(ctx context.Context, in *session.AddRequest, opts ...grpc.CallOption) (*session.AddResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Add", varargs...)
	ret0, _ := ret[0].(*session.AddResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockSessionsClientMockRecorder) Add(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockSessionsClient)(nil).Add), varargs...)
}

// CheckAllUserSessionTokens mocks base method.
func (m *MockSessionsClient) CheckAllUserSessionTokens(ctx context.Context, in *session.CheckAllUserSessionTokensRequest, opts ...grpc.CallOption) (*session.CheckAllUserSessionTokensResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckAllUserSessionTokens", varargs...)
	ret0, _ := ret[0].(*session.CheckAllUserSessionTokensResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAllUserSessionTokens indicates an expected call of CheckAllUserSessionTokens.
func (mr *MockSessionsClientMockRecorder) CheckAllUserSessionTokens(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAllUserSessionTokens", reflect.TypeOf((*MockSessionsClient)(nil).CheckAllUserSessionTokens), varargs...)
}

// CheckVersion mocks base method.
func (m *MockSessionsClient) CheckVersion(ctx context.Context, in *session.CheckVersionRequest, opts ...grpc.CallOption) (*session.CheckVersionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckVersion", varargs...)
	ret0, _ := ret[0].(*session.CheckVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckVersion indicates an expected call of CheckVersion.
func (mr *MockSessionsClientMockRecorder) CheckVersion(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckVersion", reflect.TypeOf((*MockSessionsClient)(nil).CheckVersion), varargs...)
}

// DeleteSession mocks base method.
func (m *MockSessionsClient) DeleteSession(ctx context.Context, in *session.DeleteSessionRequest, opts ...grpc.CallOption) (*session.DeleteSessionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSession", varargs...)
	ret0, _ := ret[0].(*session.DeleteSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockSessionsClientMockRecorder) DeleteSession(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockSessionsClient)(nil).DeleteSession), varargs...)
}

// GetVersion mocks base method.
func (m *MockSessionsClient) GetVersion(ctx context.Context, in *session.GetVersionRequest, opts ...grpc.CallOption) (*session.GetVersionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVersion", varargs...)
	ret0, _ := ret[0].(*session.GetVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MockSessionsClientMockRecorder) GetVersion(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockSessionsClient)(nil).GetVersion), varargs...)
}

// HasSession mocks base method.
func (m *MockSessionsClient) HasSession(ctx context.Context, in *session.HasSessionRequest, opts ...grpc.CallOption) (*session.HasSessionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HasSession", varargs...)
	ret0, _ := ret[0].(*session.HasSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasSession indicates an expected call of HasSession.
func (mr *MockSessionsClientMockRecorder) HasSession(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSession", reflect.TypeOf((*MockSessionsClient)(nil).HasSession), varargs...)
}

// Update mocks base method.
func (m *MockSessionsClient) Update(ctx context.Context, in *session.UpdateRequest, opts ...grpc.CallOption) (*session.UpdateRequestResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*session.UpdateRequestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockSessionsClientMockRecorder) Update(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSessionsClient)(nil).Update), varargs...)
}
